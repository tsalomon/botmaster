/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package server;

import action.Action;
import action.Command;
import action.Date;
import action.Ping;
import action.SystemInfo;
import java.awt.event.KeyEvent;
import java.net.InetAddress;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import utils.PassDisplay;
import utils.SearchTable;


/**
 *
 * @author Tim
 */
public class ControlInterface extends javax.swing.JFrame {

    /**
     * Creates new form ControlInterface
     */
    public ControlInterface() {
        initComponents();
        // display server ip address
        bottom_status.setText("Server running: " + getLocalIp() + ":" + serv.getPort());
        
        
        connections.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
        
        // when a node is selected, display the remote system info
        @java.lang.Override
        public void valueChanged(ListSelectionEvent e) {
            
            int index = e.getFirstIndex();
            
            Node node = null;
            if(index < serv.numclients){
                
                node = serv.clients.get(index);
                Action system = new SystemInfo(node);
                system.execute();
                
                String[] info = ((String)system.getReturnvalue()).split("/");
                
                displayNodeInfo(info);
                
                
            
            }
                
    }     
    
    });
        
        
    }
    
    public final static ControlPoint serv = new ControlPoint();


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        getDate = new javax.swing.JMenuItem();
        getScreenshot = new javax.swing.JMenuItem();
        sendCommand = new javax.swing.JMenuItem();
        sendPing = new javax.swing.JMenuItem();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        connections = new javax.swing.JTable();
        bottom_status = new javax.swing.JLabel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        userf = new javax.swing.JLabel();
        domainf = new javax.swing.JLabel();
        osf = new javax.swing.JLabel();
        javaf = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        search = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        getDate.setText("Date");
        getDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getDateActionPerformed(evt);
            }
        });
        jPopupMenu1.add(getDate);

        getScreenshot.setText("Take a Screenshot");
        getScreenshot.setToolTipText("");
        getScreenshot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getScreenshotActionPerformed(evt);
            }
        });
        jPopupMenu1.add(getScreenshot);

        sendCommand.setText("Send a Command");
        sendCommand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendCommandActionPerformed(evt);
            }
        });
        jPopupMenu1.add(sendCommand);

        sendPing.setText("jMenuItem3");
        sendPing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendPingActionPerformed(evt);
            }
        });
        jPopupMenu1.add(sendPing);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ControlPoint");
        setLocationByPlatform(true);

        connections.setAutoCreateRowSorter(true);
        connections.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Address", "Location", "Ping (ms)", "Time", "Note"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        connections.setColumnSelectionAllowed(true);
        connections.setComponentPopupMenu(jPopupMenu1);
        connections.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        connections.setShowVerticalLines(false);
        connections.setUpdateSelectionOnSort(false);
        jScrollPane1.setViewportView(connections);
        connections.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        if (connections.getColumnModel().getColumnCount() > 0) {
            connections.getColumnModel().getColumn(1).setResizable(false);
            connections.getColumnModel().getColumn(2).setResizable(false);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 499, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Nodes", jPanel1);

        jLabel2.setText("User:");

        jLabel3.setText("Domain:");

        jLabel4.setText("OS:");

        jLabel5.setText("Java:");

        userf.setText(" ");

        domainf.setText("         ");

        osf.setText("     ");

        javaf.setText("     ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(userf, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(javaf, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(osf, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(domainf, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(userf))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(domainf))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(osf))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(javaf))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(202, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Info", jPanel2);

        jLabel1.setText("Search:");

        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });
        search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchKeyReleased(evt);
            }
        });

        jMenu1.setText("File");

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Exit");
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Tools");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Password Generator");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bottom_status, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 504, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bottom_status, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void getDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getDateActionPerformed
        // get the remote date       
        Runnable getDate = new Runnable() {

        public void run() {

            Node node_selected = serv.clients.get(connections.getSelectedRow());
            Action date = new Date(node_selected);
            date.execute();
            connections.getModel().setValueAt(date.getReturnvalue(), connections.getSelectedRow(),3);

        }
        };
        getDate.run();
        
    }//GEN-LAST:event_getDateActionPerformed

    private void getScreenshotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getScreenshotActionPerformed
        // get a remote screenshot 
        server.Node node_selected = serv.clients.get(connections.getSelectedRow());
         action.Action screen = new action.Screenshot(node_selected);
         screen.execute();
         
         java.lang.String image_s = (java.lang.String)screen.getReturnvalue();
        try {
            byte[] image_b = com.sun.org.apache.xerces.internal.impl.dv.util.Base64.decode(image_s);
            java.awt.image.BufferedImage imag=javax.imageio.ImageIO.read(new java.io.ByteArrayInputStream(image_b));
            
            javax.swing.JFrame frame = new javax.swing.JFrame();
            frame.setSize(640, 512);
            frame.getContentPane().setLayout(new java.awt.FlowLayout());
            frame.getContentPane().add(new javax.swing.JLabel(new javax.swing.ImageIcon(imag)));
            frame.pack();
            frame.setVisible(true);
        } catch (java.io.IOException ex) {
            java.util.logging.Logger.getLogger(server.ControlInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } 
    }//GEN-LAST:event_getScreenshotActionPerformed

    private void sendCommandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendCommandActionPerformed
         // send a command to the remote client
         Node node_selected = serv.clients.get(connections.getSelectedRow());
         String command = JOptionPane.showInputDialog(this, "Input Command");
         Action comm = new Command(node_selected, command);
         comm.execute();

               javax.swing.JTextArea output = new JTextArea();
               output.setText((String)comm.getReturnvalue());
               java.lang.Object[] window = {"Output:", output};

               javax.swing.JOptionPane op = new javax.swing.JOptionPane(
                    window,
                    javax.swing.JOptionPane.INFORMATION_MESSAGE,
                    javax.swing.JOptionPane.OK_OPTION,
                    null,
                    null);

               javax.swing.JDialog dialog = op.createDialog(this, "Command");
               dialog.setVisible(true);
            // TODO add your handling code here:
    }//GEN-LAST:event_sendCommandActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // display the password generator
        JFrame frame = new PassDisplay();
        frame.setTitle("Secure Password Generation");
        frame.setLocationRelativeTo(this);
        frame.setVisible(true);// TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchActionPerformed

    private void searchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchKeyReleased
        
        // searches the table when enter key is typed
        SearchTable s = new SearchTable();
        
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            //search the table in selected column using binary search
            int index = s.searchTable(connections, search.getText(), connections.getSelectedColumn());
            if(index == -1){
                JOptionPane.showMessageDialog(this, "Could not find search term in table.");
            }else{
            connections.setRowSelectionInterval(index, index);
            System.out.println(index);
            }
         
        }
 
    }//GEN-LAST:event_searchKeyReleased

    private void sendPingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendPingActionPerformed
         Node node_selected = serv.clients.get(connections.getSelectedRow());
         //String command = JOptionPane.showInputDialog(this, "Input Command");
         Action comm = new Ping(node_selected);
         long start_time = System.currentTimeMillis();
         comm.execute();
         
         
         //System.out.println(comm.getReturnvalue());
         long stop_time = System.currentTimeMillis();
         connections.getModel().setValueAt((stop_time-start_time), connections.getSelectedRow(),2);
         System.out.println("Round trip time is "+ (stop_time-start_time) + "ms");

               
               
    }//GEN-LAST:event_sendPingActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ControlInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ControlInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ControlInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ControlInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ControlInterface().setVisible(true);
                //refresh connections and display on gui
                refreshNodes();
                  
            }
        });
        try {
            // start the controlpoint
            serv.startServer();
            
            
            
            

        } catch (java.io.IOException ex) {
            System.out.println("Could not start server.");
        }
      
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JLabel bottom_status;
    private static javax.swing.JTable connections;
    private static javax.swing.JLabel domainf;
    private static javax.swing.JMenuItem getDate;
    private static javax.swing.JMenuItem getScreenshot;
    private static javax.swing.JLabel jLabel1;
    private static javax.swing.JLabel jLabel2;
    private static javax.swing.JLabel jLabel3;
    private static javax.swing.JLabel jLabel4;
    private static javax.swing.JLabel jLabel5;
    private static javax.swing.JMenu jMenu1;
    private static javax.swing.JMenu jMenu2;
    private static javax.swing.JMenuBar jMenuBar1;
    private static javax.swing.JMenuItem jMenuItem1;
    private static javax.swing.JMenuItem jMenuItem2;
    private static javax.swing.JPanel jPanel1;
    private static javax.swing.JPanel jPanel2;
    private static javax.swing.JPopupMenu jPopupMenu1;
    private static javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JSeparator jSeparator1;
    private static javax.swing.JTabbedPane jTabbedPane1;
    private static javax.swing.JTabbedPane jTabbedPane2;
    private static javax.swing.JLabel javaf;
    private static javax.swing.JLabel osf;
    private static javax.swing.JTextField search;
    private static javax.swing.JMenuItem sendCommand;
    private static javax.swing.JMenuItem sendPing;
    private static javax.swing.JLabel userf;
    // End of variables declaration//GEN-END:variables

    // method displays all nodes (new or otherwise)
    public static void refreshNodes(){
        
        new Timer().schedule(new TimerTask() {
        public void run()  {
        
            java.util.List<server.Node> nodes = serv.clients;
            java.util.Iterator it = nodes.iterator();
            int row = 0;

            while(it.hasNext()){

                server.Node st = (server.Node)it.next();
                connections.getModel().setValueAt(st.ip, row, 0);
                connections.getModel().setValueAt(st.getLocation(), row, 1);
                row++;

            }
        }
        // refreshes every second
        }, 100, 1000);

    }

    // get the ip the server is running on
    public String getLocalIp(){

        String thisip = null;
        try
        {
           InetAddress thisIp = InetAddress.getLocalHost();
            thisip = thisIp.getHostAddress().toString();
        }

        catch(Exception e){


        }
        return thisip;
     }
    
    //update system info in gui
    public void displayNodeInfo(String[] info){
        
        userf.setText(info[0]);
        domainf.setText(info[1]);
        osf.setText(info[2]);
        javaf.setText(info[3]);
    }

    
}











